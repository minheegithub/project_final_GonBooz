<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 담당 : 최민희  -->
<!-- 
	XML Mapper
	1.XML인식은 root-context.xml에서 mapperLocations 속성을 이용한다. 
	
	2.PreparedStatement 에 들어가는 파라미터 인식은 #{}을 통해서 한다. ?에 바인딩되는 것이다. setNum() > #{num}
	파라미터가 Map타입인 경우 #{num}은 Map객체의 키 값이 'num'인 값을 찾는다.
    
    3.DAO메소드 이름을 기초로 XML Mapper를 작성
    
    4.#{}과 ${}의 차이
    	preparedStatement 와 Statement 의 차이점이라 보면된다 (쉽게 동적 과 정적의 차이)
		오라클로 전달할때 '?' 와 '값' 형태로 바인딩 된다.
		preparedStatement 방식인 #{} 은 쿼리의 재사용이 가능하지만
		Statement 방식인 ${} 은 재사용이 불가능하며 새로운 쿼리로 인식하기 때문에 성능상 차이가 존재한다.
		
		${}는 값이 넣어진 채로 쿼리문이 수행된다. 파라미터의 값이 바뀔때마다 항상 쿼리문 파싱을 진행해야 한다.(성능상의 단점)
		''따옴표가 붙이 않기 떄문에 태이블 이름이나 컬럼 이름을 동적으로 결정할때 사용가능하다. 
 -->

<mapper namespace="com.gb.wn.main.DAO.BoardDAO">
 
   <!-- 게시판 글 작성 -->
   <!-- 
   		keyProperty:selectKey구문의 결과가 셋팅될 대상 
   		order="BEFORE" : 키를 먼저 조회하고 그 값을 keyProperty에 셋탕한 뒤 insert 구문을 실행
   		(order="AFTER" : insert구문을 먼저 실행한뒤 selectKey구문을 실행 
   		오라클 데이터베이스는 insert 구문 내부에서 일관된 호출항태로 처리한다.
     -->
   <insert id="boardWrite"  parameterType="boardVO" useGeneratedKeys="true" keyProperty="bno">
	    <selectKey keyProperty="bno" resultType="int" order="BEFORE">
	    	SELECT ${b_name}_BOARD_SEQ.NEXTVAL FROM DUAL
	    </selectKey>
	   
	   INSERT INTO ${b_name}_BOARD(    BNO 
	   					      , TITLE 
	   					      , CONTENT 
	   					      , WRITER
	   					      , STORED_FILE_NAME  )
	                 VALUES(    #{bno}
	                 		  , #{title}
	                 		  , #{content}
	                 		  , #{writer}
	                 		  , #{stored_file_name}  )
   
   </insert>
  
  
   <!--게시판 리스트   -->	
   <!--
    1.where1=1? 
  	동적쿼리를 만들때 조건을 준다. 첫번째 조건에 어떤것이 올지 몰라 제일 먼저 무의미한 조건을 걸어두고 AND로 조건들을 쭉 붙이기 위해 사용하는 것이다.
    
    2.#{rowStart}#{rowEnd} 파라미터는 Criteria클래스에서 받았다. 초기값계산후 각각 1과 10
     -->
 	<select id="boardList" resultType="boardVO" parameterType="com.gb.wn.main.board.boardVO.SearchCriteria">
		SELECT  BNO, 
		        TITLE, 
		        CONTENT,
		        WRITER, 
		        REGDATE,
		        HIT,
		        RECNT,
		        STORED_FILE_NAME,
		        LIKECOUNT
		 FROM ( 
		        SELECT BNO, 
		               TITLE, 
		               CONTENT, 
		               WRITER, 
		               REGDATE,
		               HIT,
		               RECNT, 
		               STORED_FILE_NAME,
		               LIKECOUNT,
		               ROW_NUMBER() OVER(ORDER BY BNO DESC) AS RNUM
		         FROM ${board_name}_board
		          WHERE 1=1 
		         <include refid="search"></include> 
		                       ) GB
		WHERE RNUM BETWEEN #{rowStart} AND #{rowEnd}
		ORDER BY BNO DESC
	</select>

	<!-- 게시물 총 갯수 -->
	<select id="listCount" parameterType="com.gb.wn.main.board.boardVO.SearchCriteria" resultType="int">
	
		SELECT COUNT(BNO)
		   FROM ${board_name}_board
		   WHERE 1=1
		<include refid="search"></include>	
		   AND BNO > 0
	
	</select>
	
	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">AND TITLE LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'c'.toString()">AND CONTENT LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'w'.toString()">AND WRITER LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'tc'.toString()">AND (TITLE LIKE '%' || #{keyword} || '%') or (CONTENT LIKE '%' || #{keyword} || '%')</if>
		</if>
	</sql>
 
	<!--게시판 리스트 end   -->	
	
	<!--게시물 보기(조회)  -->
	<select id="boardView" parameterType="boardVO" resultType="boardVO">
		SELECT	BNO
			  , TITLE
			  , CONTENT
			  , WRITER
			  , REGDATE
			  , HIT
			  , RECNT
			  , LIKECOUNT
		 FROM ${b_name}_BOARD
		 WHERE BNO = #{bno}
	</select>
	
	
	 <insert id="likeInsert" parameterType="com.gb.wn.main.board.boardVO.LikeVO">
		INSERT INTO ${b_name}_LIKE(
			BNO,
			WRITER
		)VALUES(
			#{bno},
			#{writer}
		)
    </insert>
	
	<!--내아이디로 추천 눌렀는지 확인  -->
	<select id="findLike" parameterType="com.gb.wn.main.board.boardVO.LikeVO" resultType="int">
		SELECT COUNT(*)
		FROM ${b_name}_LIKE
		WHERE BNO = #{bno}
		AND WRITER = #{writer}
	</select>
	
	<update id="UpdatelikeCnt" parameterType="boardVO">
		UPDATE ${b_name}_BOARD SET LIKECOUNT = LIKECOUNT + 1 WHERE BNO =#{bno} 
	</update> 
 
		
	 <delete id="boardDelete" parameterType="boardVO">
		DELETE 
		  FROM ${b_name}_BOARD
		 WHERE BNO = #{bno}
	</delete>
	
	 <insert id="insertFile" parameterType="hashMap">
		INSERT INTO ${b_name}_FILE(
			FILE_NO,
			BNO,
			ORG_FILE_NAME,
			STORED_FILE_NAME,
			FILE_SIZE
		)VALUES(
			SEQ_${b_name}_FILE_NO.NEXTVAL,
			#{bno},
			#{org_file_name},
			#{stored_file_name},
			#{file_size}
		)
    </insert>
    
    <!-- 임시파일명으로 게시글 인덱스 조회 -->
	<select id="selectBno" parameterType="boardVO" resultType="int">
		SELECT BNO
		  FROM ${b_name}_BOARD
		 WHERE STORED_FILE_NAME = #{stored_file_name}
	</select>
	
	<!--게시글에서 조회한 인덱스 명을 파일 테이블데 다시 저장 -->
	 <update id="updateFile" parameterType="boardVO">
    	UPDATE ${b_name}_FILE SET
    	BNO = #{bno}
    	WHERE STORED_FILE_NAME = #{stored_file_name}
    </update>
	
    <!-- 첨부파일 조회 -->
	<select id="selectFileList" parameterType="boardVO" resultType="hashMap">
		SELECT FILE_NO,
			   ORG_FILE_NAME,
			   ROUND(FILE_SIZE/1024,1) AS FILE_SIZE
		  FROM ${b_name}_FILE
		 WHERE BNO = #{bno}
	</select>
	
	<!-- 첨부파일 다운 -->
	<select id="selectFileInfo" parameterType="hashMap" resultType="hashMap">
		SELECT 
			STORED_FILE_NAME,
			ORG_FILE_NAME
		FROM ${b_name}_FILE
		WHERE FILE_NO = #{file_no}
	</select>

    <!-- 게시판 조회수 -->
    <update id="boardHit" parameterType="boardVO">
    	UPDATE ${b_name}_BOARD SET
    	HIT = HIT+1
    	WHERE BNO = #{bno}
    </update>
    
    <!-- 게시판 조회수 -->
    <update id="gongziHit" parameterType="boardVO">
    	UPDATE GZ_BOARD SET
    	HIT = HIT+1
    	WHERE GNO = #{gno}
    </update>
    
     <!-- 공지글쓰기 -->
   <insert id="gongziWrite"  parameterType="boardVO" useGeneratedKeys="true" keyProperty="gno">
	    <selectKey keyProperty="gno" resultType="int" order="BEFORE">
	    	SELECT GZ_BOARD_SEQ.NEXTVAL FROM DUAL
	    </selectKey>
	   
	   INSERT INTO GZ_BOARD(    GNO 
	   					      , TITLE 
	   					      , CONTENT 
	   					      , WRITER
	   					       )
	                 VALUES(    #{gno}
	                 		  , #{title}
	                 		  , #{content}
	                 		  , #{writer}
	                 		 )
   
   </insert>
   
	<!--공지글 리스트 가져오기  -->
	 <select id="listGongzi" resultType="boardVO">
		SELECT  GNO, 
		        TITLE, 
		        CONTENT,
		        WRITER, 
		        REGDATE,
		        HIT
		 FROM GZ_BOARD
		ORDER BY GNO DESC
	</select>
	
	<!--공지글 가져오기  -->
	<select id="gongziView" parameterType="boardVO" resultType="boardVO">
		SELECT	GNO
			  , TITLE
			  , CONTENT
			  , WRITER
			  , REGDATE
			  , HIT
		 FROM GZ_BOARD
		 WHERE GNO = #{gno}
	</select>
	
	<!-- 공지글 삭제 -->
	 <delete id="gzDelete" parameterType="boardVO">
		DELETE 
		  FROM GZ_BOARD
		 WHERE GNO = #{gno}
	</delete>
	
	<!--  스터디룸에서 해당 스터디게시판 최신글 3개 목록 미리보기  -->
	<select id="getThreeList" resultType="boardVO" parameterType="boardVO">
		SELECT LAST.*, ROWNUM FROM
		(SELECT BNO,TITLE, WRITER, REGDATE, HIT, RECNT, LIKECOUNT
		FROM ${b_name}_BOARD ORDER BY LIKECOUNT DESC ) LAST
		WHERE ROWNUM BETWEEN 1 AND 3
	</select> 
</mapper>
 